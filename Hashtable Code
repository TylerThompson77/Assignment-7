#include<iostream>
#include<cstdlib>
#include<string>
#include<cstdio>

using namespace std;
const int T_S = 200;
//Class to take the user's input
class HashTableEntry
{
public:
int k;  //Item stored
int v;  //Location in the hastable

//Store the value in the hashtable as (k,v)
//k being the value and v being the location.
HashTableEntry(int k, int v)
{
this->k= k;
this->v = v;
}
};

//Class for the storage of the hashtable's entrys
class HashMapTable
{
private:
HashTableEntry **t;
public:
HashMapTable()
{
t = new HashTableEntry * [T_S];
for (int i = 0; i< T_S; i++)
{
t[i] = NULL;
}
}
int HashFunc(int k)
{
return k % T_S;
}
void Insert(int k, int v)
{
int h = HashFunc(k);
while (t[h] != NULL && t[h]->k != k)
{
h = HashFunc(h + 1);
}
if (t[h] != NULL)
delete t[h];
t[h] = new HashTableEntry(k, v);
}

//Allows for the search of the value in the table
int SearchKey(int k)
{
int h = HashFunc(k);
while (t[h] != NULL && t[h]->k != k)
{
h = HashFunc(h + 1);
}
if (t[h] == NULL)
return -1;
else
return t[h]->v;
}

//Removes the value selected by the user from the hastable
void Remove(int k)
{
int h = HashFunc(k);
while (t[h] != NULL)
{
if (t[h]->k == k)
break;
h = HashFunc(h + 1);
}
if (t[h] == NULL)
{

//Test to see if there was the element that the user searched for
cout<<"No Element found at key "<<k<<endl;
return;
} else
{
delete t[h];
}
cout<<"Element Deleted"<<endl;
}
~HashMapTable() {
for (int i = 0; i < T_S; i++)
{
if (t[i] != NULL)
delete t[i];
delete[] t;
}
}
};
int main()
{
HashMapTable hash;
int k, v;
int c;
while (1)
{

//Give the initial options to the user
cout<<"1.Insert value into the hashtable"<<endl;
cout<<"2.Search for a value in the hastable"<<endl;
cout<<"3.Delete value from the hashtable"<<endl;
cout<<"4.Exit"<<endl;
cout<<"Enter your choice: ";
cin>>c;
switch(c)
{

//Case 1 if the user chooses option to insert a value
case 1:
cout<<"Enter value to insert: ";
cin>>v;
cout<<"Enter where you want the value to be inserted: ";
cin>>k;
hash.Insert(k, v);
break;

//Case 2 to search for a value in the hashtable
case 2:
cout<<"Enter value you want to search for: ";
cin>>k;
if (hash.SearchKey(k) == -1)
{
cout<<"No value found in the table "<<k<<endl;
continue;
} else
{
cout<<"Value in Hastable "<<k<<" : ";
cout<<hash.SearchKey(k)<<endl;
}
break;

//Case 3 to delete a value in the hashtable
case 3:
cout<<"Enter the value you want to be deleted: ";
cin>>k;
hash.Remove(k);
break;

//Case four to exit from the hastbale
case 4:
exit(1);
default:
cout<<"\nEnter correct option\n";
}
}
return 0;
}
